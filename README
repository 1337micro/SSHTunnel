
Purpose: Tunnel your browser or other applications through a remote server with openSSH, in order to stay anonymous online

Install:
On debian-based systems:
    dpkg -b 'path_to_directory_containing_DEBIAN_and_usr_folders'
    dpkg -i sshtunnel.deb
    You can then execute the command python3 /usr/bin/SSHTunnel.py to run the application

INSTALLATION on other systems, or alternate installation for failed installs:
    Windows is not supported at all at this time, Neither is Mac.
    
    For all other linux distros you must:
    1)
        Install the following dependencies:
        tsocks v1.8+ recommended (http://tsocks.sourceforge.net/download.php OR try your distro repos!),
        python3, 
        python3-pyside, 
        openSSH, 
        firefox and/or google-chrome (optional but HIGHLY recommended)
    2)
        If it hasn't been done already, youll need to create an alias (nano .bashrc) for
        tsocks, such that when you type tsocks in the terminal it will refer to the correct program
    3)
        sudo gedit /etc/tsocks.conf and replace the entire file with the
        following text:
# This is the configuration for libtsocks (transparent socks) Lines beginning
# with # and blank lines are ignored# The basic idea is to specify:
#       - Local subnets - Networks that can be accessed directly without
#                         assistance from a socks server
#       - Paths - Paths are basically lists of networks and a socks server
#                 which can be used to reach these networks
#       - Default server - A socks server which should be used to access
#                          networks for which no path is available
# Much more documentation than provided in these comments can be found in the
# man pages, tsocks(8) and tsocks.conf(8)

# Local networks For this example this machine can directly access
# 192.168.0.0/255.255.255.0 (192.168.0.*) and 10.0.0.0/255.0.0.0 (10.*)

local = 192.168.0.0/255.255.255.0 local = 10.0.0.0/255.0.0.0

# Paths For this example this machine needs to access 150.0.0.0/255.255.0.0 as
# well as port 80 on the network 150.1.0.0/255.255.0.0 through the socks 5
# server at 10.1.7.25 (if this machines hostname was "socks.hello.com" we could
# also specify that, unless --disable-hostnames was specified to ./configure).

path {
        reaches = 150.0.0.0/255.255.0.0 reaches = 150.1.0.0:80/255.255.0.0
        server = 10.1.7.25 server_type = 5 default_user = delius default_pass =
        hello
}

# Default server For connections that aren't to the local subnets or to
# 150.0.0.0/255.255.0.0 the server at 192.168.0.1 should be used (again,
# hostnames could be used too, see note above)

server = 127.0.0.1
# Server type defaults to 4 so we need to specify it as 5 for this one
server_type = 5
# The port defaults to 1080 but I've stated it here for clarity
server_port = 1080

    
USAGE:
    You need to have a server that allows you to ssh into it on port 22.
    
    python3 /usr/bin/SSHTunnel.py 
    Press the button which most describes your situation:
    
        If you have a VPS or server:
            Fill out the info on the next page and
            Press Connect. Pay close attention to your terminal, 
            you may be required to enter additional information to succesfuly connect.
            
            In the next window you will see the SOCKS
            proxy information, you can either enter this information manually into your
            browser settings or press one of the buttons
            to launch a special instance of the browser. 
    
            You can also type a terminal command to tunnel any of your favorite
            applications (especially those which don't allow you to modify proxy
            settings)
        
        If you don't have a VPS or server:
            A webview will be shown, please purchase one and return to the form later
            (disclaimer: these are affiliate links)
        

Tested on:
    ubuntu 12.04+ python 3.2+ tsocks 1.8


    
